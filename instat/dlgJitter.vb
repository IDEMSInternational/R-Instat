' Instat-R
' Copyright (C) 2015
'
' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License k
' along with this program.  If not, see <http://www.gnu.org/licenses/>.
Imports instat.Translations
Public Class dlgJitter
    Public clsRunif As New RFunction
    Public bReset As Boolean = True
    Public bFirstLoad As Boolean = True
    Private clsOperatorParameter As New ROperator

    Private Sub dlgJitter_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        If bFirstLoad Then
            InitialiseDialog()
            bFirstLoad = False
        End If
        If bReset Then
            SetDefaults()
        End If
        SetRCodeforControls(bReset)
        bReset = False
        autoTranslate(Me)
    End Sub


    'MAX
    '# dlgJitter code generated by the dialog Jitter
    'value <- InstatDataObject$get_columns_from_data(col_name="value", data_name="data1_stackedNoCarry")
    'Jitter_values1 <- value + runif(max=NUMBER, min=-NUMBER, n=10)
    'InstatDataObject$add_columns_to_data(col_data = Jitter_values1, col_name = "Jitter_values1", data_name = "data1_stackedNoCarry")

    'MIN AND MAX
    '# dlgJitter code generated by the dialog Jitter
    'Jitter_values2 <- value + runif(n=10, min=0, max=1)
    'InstatDataObject$add_columns_to_data(col_data = Jitter_values2, col_name = "Jitter_values2", data_name = "data1_stackedNoCarry")



    Private Sub InitialiseDialog()
        ucrBase.iHelpTopicID = 396

        'ucrReceiver
        ucrReceiverJitter.Selector = ucrSelectorForJitter
        ucrReceiverJitter.SetMeAsReceiver()
        ucrReceiverJitter.SetIncludedDataTypes({"numeric"})
        ucrReceiverJitter.SetParameterIsRFunction()

        'Length of Dataset
        clsRunif.AddParameter("n", ucrSelectorForJitter.ucrAvailableDataFrames.iDataFrameLength)

        'operator parameter
        clsOperatorParameter.SetOperation("+")
        '       clsOperatorParameter.SetOperation(New ROperator("+"))
        clsOperatorParameter.AddParameter(True, clsRFunctionParameter:=ucrReceiverJitter.GetVariables)
        clsOperatorParameter.AddParameter(False, clsRFunctionParameter:=clsRunif)



        'rdo Buttons
        ' have two radio buttons - each with two parameters which are the same name but different select

        '        'SetParameter({ucrPnlDistance, ucrInputMaximumDistanceFromZero}, New RParameter("min", "max"))

        ' for if first rdo checked...
        'FIRSTRDO.AddToLinkedControls(ucrLinked:=ucrInputMaximumDistanceFromZero, objValues:={True}, bNewLinkedAddRemoveParameter:=True, bNewLinkedHideIfParameterMissing:=True)
        'ucrPnlDistance.AddRadioButton(rdoMaximumDistanceFromZero, -(ucrInputMaximumDistanceFromZero.GetText))
        'ucrPnlDistance.AddRadioButton(rdoMaximumDistanceFromZero, (ucrInputMaximumDistanceFromZero.GetText))


        ' similarly for if second rdo checked
        '        'SetParameter({ucrPnlDistance, ucrInputMaximum, ucrInputMinimum}, New RParameter("min", "max"))
        ' for two ucr's not one
        'SECONDRDO.AddToLinkedControls(ucrLinked:=ucrInputMaximum, objValues:={True}, bNewLinkedAddRemoveParameter:=True, bNewLinkedHideIfParameterMissing:=True)
        ' ucrPnlDistance.AddRadioButton(rdoMinimumAndMaximum, ucrInputMinimum.GetText)
        'SECONDRDO.AddToLinkedControls(ucrLinked:=ucrInputMinimum, objValues:={True}, bNewLinkedAddRemoveParameter:=True, bNewLinkedHideIfParameterMissing:=True)
        'ucrPnlDistance.AddRadioButton(rdoMinimumAndMaximum, ucrInputMaximum.GetText)

        'ucrInputMaximum.SetValidationTypeAsNumeric()
        'ucrInputMinimum.SetValidationTypeAsNumeric()
        'ucrInputMaximumDistanceFromZero.SetValidationTypeAsNumeric

        'ucrInputNewColName
        ucrInputNewColName.SetIsComboBox()
        ucrInputNewColName.SetSaveTypeAsColumn()
        ucrInputNewColName.SetDataFrameSelector(ucrSelectorForJitter.ucrAvailableDataFrames)
        ucrInputNewColName.SetLabelText("New Column Name:")
        ucrInputNewColName.SetPrefix("Jitter_values")

    End Sub

    Private Sub SetDefaults()
        ucrInputMaximumDistanceFromZero.SetName(1)
        ucrInputMaximum.SetName(1)
        ucrInputMinimum.SetName(0)
        ucrSelectorForJitter.Reset()

        clsRunif.SetRCommand("runif")

        ucrBase.clsRsyntax.SetBaseRFunction(clsRunif.Clone())

        LengthOfDataset()
    End Sub

    Private Sub ReopenDialog()

    End Sub

    Private Sub SetRCodeforControls(bReset As Boolean)
        SetRCode(Me, ucrBase.clsRsyntax.clsBaseFunction, bReset)
    End Sub

    Private Sub ucrBase_ClickReset(sender As Object, e As EventArgs) Handles ucrBase.ClickReset
        SetDefaults()
        SetRCodeforControls(True)
        TestOKEnabled()
    End Sub

    Private Sub TestOKEnabled()
        If Not ucrReceiverJitter.IsEmpty() AndAlso ucrInputNewColName.IsComplete() Then
            If Not ucrInputMaximumDistanceFromZero.IsEmpty Then
                ucrBase.OKEnabled(True)
            Else
                ucrBase.OKEnabled(False)
            End If
            If ucrInputMinimum.IsEmpty = False And ucrInputMaximum.IsEmpty = False Then
                ucrBase.OKEnabled(True)
            Else
                ucrBase.OKEnabled(False)
            End If
        Else
            ucrBase.OKEnabled(False)
        End If
    End Sub

    Private Sub grpMaximumAndMinimumValues_CheckedChanged(sender As Object, e As EventArgs) Handles rdoMaximumDistanceFromZero.CheckedChanged, rdoMinimumAndMaximum.CheckedChanged
        TestOKEnabled()
    End Sub

    Private Sub ucrInputNewColumnName_NameChanged()
        ucrBase.clsRsyntax.SetAssignTo(strAssignToName:=ucrInputNewColName.GetText, strTempDataframe:=ucrSelectorForJitter.ucrAvailableDataFrames.cboAvailableDataFrames.Text, strTempColumn:=ucrInputNewColName.GetText)
    End Sub



    Private Sub LengthOfDataset()
        clsRunif.AddParameter("n", ucrSelectorForJitter.ucrAvailableDataFrames.iDataFrameLength)
    End Sub

    Private Sub ucrSelectorForJitter_DataFrameChanged() Handles ucrSelectorForJitter.DataFrameChanged
        LengthOfDataset()
    End Sub
End Class