Imports System.Threading
Imports System.Globalization
Imports unvell.ReoGrid
Imports RDotNet

<Serializable()> Public Class InstatOptions
    Public bIncludeRDefaultParameters As Boolean
    Public fntOutput, fntScript, fntComment, fntEditor As Font
    Public clrOutput, clrScript, clrComment, clrEditor As Color
    Public strComment, strLanguageCultureCode As String
    Public strWorkingDirectory As String
    Public iPreviewRows As Integer
    Public iMaxRows As Integer
    Public lstColourPalette As List(Of Color)
    Public strGraphDisplayOption As String
    Public bCommandsinOutput As Boolean
    Public bIncludeCommentDefault As Boolean  'sets the default for comments on the dialog
    Public iDigits As Integer
    Public bShowSignifStars As Boolean

    Public Sub New(Optional bSetOptions As Boolean = True)
        'TODO Is this sensible to do in constructor?
        bIncludeRDefaultParameters = False
        bCommandsinOutput = True
        bIncludeCommentDefault = True
        fntOutput = New Font(FontFamily.GenericMonospace, 8, FontStyle.Regular)
        clrOutput = Color.Blue
        fntComment = New Font(FontFamily.GenericSansSerif, 8, FontStyle.Regular)
        clrComment = Color.Green
        fntScript = New Font(FontFamily.GenericSansSerif, 8, FontStyle.Regular)
        clrScript = Color.Black
        fntEditor = New Font(FontFamily.GenericSansSerif, 10, FontStyle.Regular)
        clrEditor = Color.Black
        iPreviewRows = 10
        iMaxRows = 1000
        bCommandsinOutput = True
        strComment = "code generated by the dialog"
        strGraphDisplayOption = "view_output_window"
        'TODO is this sensible?
        strLanguageCultureCode = Thread.CurrentThread.CurrentCulture.Name
        strWorkingDirectory = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments)
        SetColorPalette(({Color.Aqua, Color.Gray, Color.LightGreen, Color.AliceBlue, Color.Maroon, Color.Green, Color.LightPink, Color.LightSkyBlue, Color.Brown, Color.MediumPurple, Color.White}).ToList)
        iDigits = 4
        bShowSignifStars = False
        If bSetOptions Then
            SetOptions()
        End If
    End Sub

    Public Sub SetOptions()
        SetFormatOutput(fntOutput, clrOutput)
        SetFormatComment(fntComment, clrComment)
        SetFormatCommand(fntScript, clrScript)
        SetEditorFormat(fntEditor, clrEditor)
        SetPreviewRows(iPreviewRows)
        SetMaxRows(iMaxRows)
        SetCommandInOutpt(bCommandsinOutput)
        SetComment(strComment)
        SetGraphDisplayOption(strGraphDisplayOption)
        SetLanguageCultureCode(strLanguageCultureCode)
        SetWorkingDirectory(strWorkingDirectory)
        SetDigits(iDigits)
        SetSignifStars(bShowSignifStars)
    End Sub

    Public Sub SetMaxRows(iRows As Integer)
        iMaxRows = iRows
        frmMain.clsGrids.SetMaxRows(iMaxRows)
    End Sub

    Public Sub SetFormatOutput(fntNew As Font, clrNew As Color)
        fntOutput = fntNew
        clrOutput = clrNew
        frmMain.clsRLink.setFormatOutput(fntOutput, clrOutput)
    End Sub

    Public Sub SetFormatCommand(fntNew As Font, clrNew As Color)
        fntScript = fntNew
        clrScript = clrNew
        frmMain.clsRLink.setFormatScript(fntScript, clrScript)
    End Sub

    Public Sub SetFormatComment(fntNew As Font, clrNew As Color)
        fntComment = fntNew
        clrComment = clrNew
        frmMain.clsRLink.setFormatComment(fntComment, clrComment)
    End Sub

    Public Sub SetEditorFormat(fntNew As Font, clrNew As Color)
        fntEditor = fntNew
        clrEditor = clrNew
        frmMain.clsGrids.SetFormatDataView(fntEditor, clrEditor)
    End Sub

    Public Sub SetPreviewRows(intlines As Integer)
        iPreviewRows = intlines
        dlgImportDataset.setLinesToRead(iPreviewRows)
    End Sub

    Public Sub SetComment(strText As String)
        strComment = strText
    End Sub

    Public Sub SetLanguageCultureCode(strLanguage As String)
        strLanguageCultureCode = strLanguage
        Select Case strLanguageCultureCode
            Case "en-GB"
                Thread.CurrentThread.CurrentCulture = New CultureInfo("en-GB")
                Thread.CurrentThread.CurrentUICulture = New CultureInfo("en-GB")
            Case "fr-FR"
                Thread.CurrentThread.CurrentCulture = New CultureInfo("fr-FR")
                Thread.CurrentThread.CurrentUICulture = New CultureInfo("fr-FR")
            Case "sw-KE"
                Thread.CurrentThread.CurrentCulture = New CultureInfo("sw-KE")
                Thread.CurrentThread.CurrentUICulture = New CultureInfo("sw-KE")
            Case "es-ES"
                Thread.CurrentThread.CurrentCulture = New CultureInfo("es-ES")
                Thread.CurrentThread.CurrentUICulture = New CultureInfo("es-ES")
            Case Else
                Thread.CurrentThread.CurrentCulture = New CultureInfo("en-GB")
                Thread.CurrentThread.CurrentUICulture = New CultureInfo("en-GB")
        End Select
    End Sub

    Public Sub SetWorkingDirectory(strWD As String)
        Dim clsSetwdFunction As New RFunction

        clsSetwdFunction.SetRCommand("setwd")
        clsSetwdFunction.AddParameter("dir", Chr(34) & strWorkingDirectory & Chr(34))
        strWorkingDirectory = strWD
        'This is done in R link setup. Need to rethink how this is done.
        'Commented out for now to not repeat.
        'frmMain.clsRLink.RunScript(clsSetwdFunction.ToScript(), strComment:="Option: Setting working directory")
    End Sub

    Public Sub SetColorPalette(lstColours As List(Of Color))
        lstColourPalette = lstColours
    End Sub

    Public Sub SetGraphDisplayOption(strGraphOption As String)
        strGraphDisplayOption = strGraphOption
        'setting the string for graphs display
        frmMain.clsRLink.strGraphDisplayOption = strGraphDisplayOption
    End Sub

    Public Sub SetCommandInOutpt(bCommand As Boolean)
        bCommandsinOutput = bCommand
        frmMain.clsRLink.bShowCommands = bCommandsinOutput
    End Sub

    Public Sub SetCommentsInOutput(bComment As Boolean)
        bCommandsinOutput = bComment
    End Sub

    Public Sub SetDigits(iNewDigits As Integer)
        Dim clsOptionsFunction As New RFunction
        Dim clsGetOptionFunction As New RFunction

        If iNewDigits > 22 OrElse iNewDigits < 0 Then
            MsgBox("Cannot set digits to: " & iNewDigits & ". Digits must be an integer between 0 and 22.", MsgBoxStyle.Critical, "Error setting digits")
        Else
            iDigits = iNewDigits
            clsGetOptionFunction.SetRCommand("getOption")
            clsGetOptionFunction.AddParameter("x", Chr(34) & "digits" & Chr(34))
            If frmMain.clsRLink.RunInternalScriptGetValue(clsGetOptionFunction.ToScript()).AsInteger(0) <> iDigits Then
                clsOptionsFunction.SetRCommand("options")
                clsOptionsFunction.AddParameter("digits", iDigits)
                frmMain.clsRLink.RunScript(clsOptionsFunction.ToScript(), strComment:="Option: Number of digits to display")
            End If
        End If
    End Sub

    Public Sub SetSignifStars(bShowStars As Boolean)
        Dim clsOptionsFunction As New RFunction
        Dim clsGetOptionsFunction As New RFunction

        bShowSignifStars = bShowStars
        clsGetOptionsFunction.SetRCommand("getOption")
        clsGetOptionsFunction.AddParameter("x", Chr(34) & "show.signif.stars" & Chr(34))
        clsOptionsFunction.SetRCommand("options")
        If frmMain.clsRLink.RunInternalScriptGetValue(clsGetOptionsFunction.ToScript()).AsLogical(0) <> bShowSignifStars Then
            If bShowSignifStars Then
                clsOptionsFunction.AddParameter("show.signif.stars", "TRUE")
            Else
                clsOptionsFunction.AddParameter("show.signif.stars", "FALSE")
            End If
            frmMain.clsRLink.RunScript(clsOptionsFunction.ToScript(), strComment:="Option: Show stars on summary tables of coefficients")
        End If
    End Sub
End Class