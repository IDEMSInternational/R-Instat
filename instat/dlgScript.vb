' R- Instat
' Copyright (C) 2015-2017
'
' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License 
' along with this program.  If not, see <http://www.gnu.org/licenses/>.

Imports RDotNet
Imports instat.Translations
Public Class dlgScript
    Private strComment As String = "Code generated by the dialog, Script"
    Private bFirstload As Boolean = True
    Private bReset As Boolean = True
    Private clsLibraryFunction, clsLibraryExampleFunction, clsGetDataFrameFunction, clsSaveColumnFunction, clsConstantDummyFunction, clsGetColumnFunction,
            clsSaveGraphFunction, clsTempPreviewFunction, clsLibraryExpFunction, clsImportNewDataFrame, clsRFunctionList, clsSaveTableFunction, clsSaveModelFunction As New RFunction
    Private lstAssignToStrings As New List(Of String)
    Public iCurrentPos As Integer
    Private strSelectedPackage As String = ""

    Private Sub dlgScript_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        If bFirstload Then
            InitialiseDialog()
            bFirstload = False
        End If
        If bReset Then
            SetDefaults()
        End If
        SetRCodeForControls(bReset)
        bReset = False
        autoTranslate(Me)
    End Sub

    Private Sub InitialiseDialog()

        'todo. the iCallType will probably be dynamic
        'ucrBase.clsRsyntax.iCallType = 2
        'ucrBase.clsRsyntax.bSeparateThread = False


        '--------------------------------
        'get data controls
        ucrPnlGetData.AddRadioButton(rdoGetDataFrame)
        ucrPnlGetData.AddRadioButton(rdoGetColumn)
        ucrPnlGetData.AddRadioButton(rdoGetObject)

        ucrPnlExample.AddRadioButton(rdoData)
        ucrPnlExample.AddRadioButton(rdoFunction)

        'todo. this combobox can be a custom package control in future. Its also needed in dlgHelpVignettes
        ucrComboGetPackage.SetParameter(New RParameter("package", 0))
        ucrComboGetPackage.SetItems(GetPackages(), bAddConditions:=True)
        ucrComboGetPackage.SetDropDownStyleAsNonEditable()

        ucrComboGetPackages.SetParameter(New RParameter("package", 0))
        ucrComboGetPackages.SetItems(GetPackages(), bAddConditions:=True)
        ucrComboGetPackages.SetDropDownStyleAsNonEditable()

        ucrDataFrameGet.SetLabelText("Get Data Frame:")
        ucrDataFrameGet.SetParameter(New RParameter("data_name", 0))
        ucrDataFrameGet.SetParameterIsString()

        ucrSelectorGet.SetParameterIsString()

        ucrReceiverGet.SetParameter(New RParameter("string", 0))
        ucrReceiverGet.SetParameterIsString()
        ucrReceiverGet.Selector = ucrSelectorGet
        ucrReceiverGet.bUseFilteredData = False
        ucrReceiverGet.SetItemType("column")
        ucrReceiverGet.SetMeAsReceiver()
        ucrReceiverGet.SetLinkedDisplayControl(New List(Of Control)({lblGet}))


        '---------------------------------------------------
        'save controls
        ucrPnlSaveData.AddRadioButton(rdoSaveDataFrame)
        ucrPnlSaveData.AddRadioButton(rdoSaveColumn)
        ucrPnlSaveData.AddRadioButton(rdoSaveObject)

        ucrInputSaveDataFrame.SetValidationTypeAsRVariable()
        ucrInputSaveDataFrame.SetLinkedDisplayControl(New List(Of Control)({lblSaveDataFrame}))

        ucrChkEditLibrary.SetText("Edit")

        ucrSaveColumn.SetSaveTypeAsColumn()
        ucrSaveColumn.SetDataFrameSelector(ucrDataFrameSave)
        ucrSaveColumn.SetIsComboBox()
        ucrSaveColumn.SetLabelText("Column Name:")

        ucrSaveGraph.SetSaveTypeAsGraph()
        ucrSaveGraph.SetDataFrameSelector(ucrDataFrameSave)
        ucrSaveGraph.SetIsComboBox()
        ucrSaveGraph.SetLabelText("Graph Name:")

        ucrSaveTable.SetSaveTypeAsTable()
        ucrSaveTable.SetDataFrameSelector(ucrDataFrameSave)
        ucrSaveTable.SetIsComboBox()
        ucrSaveTable.SetLabelText("Table Name:")

        ucrSaveModel.SetSaveTypeAsModel()
        ucrSaveModel.SetDataFrameSelector(ucrDataFrameSave)
        ucrSaveModel.SetIsComboBox()
        ucrSaveModel.SetLabelText("Model Name:")

        ucrInputPreviewLibrary.txtInput.ScrollBars = ScrollBars.Vertical

        'hide base button comment controls
        ucrBase.chkComment.Checked = False
        ucrBase.chkComment.Enabled = False

    End Sub

    'todo. this function should eventually be removed once we have a control that displays packages
    Private Function GetPackages() As String()
        Dim arrAvailablePackages() As String = {}
        Dim clsGetPackages As New RFunction
        clsGetPackages.SetRCommand("get_installed_packages_with_data")
        clsGetPackages.AddParameter("with_data", "FALSE")
        Dim expPackageNames As SymbolicExpression = frmMain.clsRLink.RunInternalScriptGetValue(clsGetPackages.ToScript(), bSeparateThread:=False, bSilent:=True)
        If expPackageNames IsNot Nothing AndAlso expPackageNames.Type <> Internals.SymbolicExpressionType.Null Then
            arrAvailablePackages = expPackageNames.AsCharacter.ToArray
            Array.Sort(arrAvailablePackages)
        End If
        Return arrAvailablePackages
    End Function

    Private Sub SetDefaults()
        clsLibraryFunction = New RFunction
        clsGetDataFrameFunction = New RFunction
        clsSaveColumnFunction = New RFunction
        clsSaveGraphFunction = New RFunction
        clsSaveTableFunction = New RFunction
        clsSaveModelFunction = New RFunction
        clsConstantDummyFunction = New RFunction
        clsImportNewDataFrame = New RFunction
        clsRFunctionList = New RFunction
        clsGetColumnFunction = New RFunction
        clsLibraryExampleFunction = New RFunction
        clsLibraryExpFunction = New RFunction
        clsTempPreviewFunction = New RFunction

        lstAssignToStrings.Clear()

        'get controls reset
        rdoGetDataFrame.Checked = True
        rdoData.Checked = True
        ucrComboGetPackage.Reset()
        ucrComboGetPackages.Reset()
        ucrDataFrameGet.Reset()
        ucrSelectorGet.Reset()
        'ucrReceiverGetCol.SetMeAsReceiver()
        'ucrReceiverGetObject.SetItemType("graph")

        'save controls reset
        rdoSaveDataFrame.Checked = True
        ucrInputDataFrame.SetName("")
        ucrDataFrameSave.Reset()
        ucrSaveColumn.Reset()
        ucrSaveGraph.Reset()
        ucrSaveTable.Reset()
        ucrSaveModel.Reset()

        'script text control reset 
        txtScript.Text = "# Code generated by the dialog, Script"

        clsRFunctionList.SetRCommand("list")
        clsImportNewDataFrame.SetRCommand("data_book$import_data")

        'global function resets
        clsLibraryFunction.SetRCommand("library")
        clsLibraryFunction.AddParameter("package", Chr(34) & "datasets" & Chr(34))

        clsLibraryExampleFunction.SetRCommand("library")
        clsLibraryExampleFunction.AddParameter("package", Chr(34) & "datasets" & Chr(34))

        clsLibraryExpFunction.SetRCommand("getExample")

        clsConstantDummyFunction.AddParameter("preview", "FALSE", iPosition:=0)
        clsConstantDummyFunction.AddParameter("edit", "FALSE", iPosition:=1)

        clsGetDataFrameFunction.SetRCommand("data_book$get_data_frame")
        clsGetDataFrameFunction.AddParameter("data_name", Chr(34) & ucrDataFrameGet.strCurrDataFrame & Chr(34))
    End Sub

    Private Sub SetRCodeForControls(bReset As Boolean)
        ucrComboGetPackage.SetRCode(clsLibraryFunction, bReset)
        ucrComboGetPackages.SetRCode(clsLibraryExampleFunction, bReset)
        ucrDataFrameGet.SetRCode(clsGetDataFrameFunction, bReset)

        'saving results
        ucrSaveColumn.SetRCode(clsSaveColumnFunction, bReset)
        ucrSaveGraph.SetRCode(clsSaveGraphFunction, bReset)
        ucrSaveTable.SetRCode(clsSaveTableFunction, bReset)
        ucrSaveModel.SetRCode(clsSaveModelFunction, bReset)
    End Sub

    Private Sub SetData()
        ucrDataFrameGet.SetVisible(False)
        ucrSelectorGet.SetVisible(False)
        ucrReceiverGet.SetVisible(False)
        If rdoGetDataFrame.Checked Then
            ucrDataFrameGet.SetVisible(True)
            Dim strAssignTo = ucrDataFrameGet.strCurrDataFrame
            SetPreviewScript(clsGetDataFrameFunction, strAssignTo)
        Else
            ucrSelectorGet.SetVisible(True)
            ucrReceiverGet.SetVisible(True)
            SetGetReceiverItemType()
            Dim strAssignTo = ucrReceiverGet.GetVariableNames(False)
            If Not String.IsNullOrEmpty(strAssignTo) Then
                Dim clsGetColumnFunction As RFunction = ucrReceiverGet.GetVariables
                SetPreviewScript(clsGetColumnFunction, strAssignTo)
            Else
                ucrInputPreviewLibrary.txtInput.Clear()
            End If
        End If
    End Sub

    Private Sub FillListViewWithDatasets(dfDataframe As DataFrame)
        Dim lstItem As ListViewItem

        lstCollection.Items.Clear()
        If dfDataframe IsNot Nothing Then
            For i As Integer = 0 To dfDataframe.RowCount - 1
                lstItem = lstCollection.Items.Add(dfDataframe(i, 0))
                If dfDataframe.ColumnCount > 1 Then
                    lstItem.SubItems.Add(dfDataframe(i, 1))
                Else
                    lstItem.SubItems.Add("")
                End If
            Next
            lstCollection.Select()
            lstCollection.Columns(0).Text = "Data"
        End If
    End Sub

    Private Sub FillListViewWithFunctions(lstFunctions As List(Of String))
        Dim lstItem As ListViewItem
        lstCollection.Items.Clear()
        If lstFunctions IsNot Nothing Then
            For i As Integer = 0 To lstFunctions.Count - 1
                lstItem = lstCollection.Items.Add(lstFunctions(i))
                lstItem.SubItems.Add("")
            Next
            lstCollection.Select()
            lstCollection.Columns(0).Text = "Functions"
        End If
    End Sub

    Private Sub LoadFunctions(strPackage As String)
        Dim expTemp As SymbolicExpression
        Dim lstFunction As New List(Of String)
        If strPackage IsNot Nothing Then
            expTemp = frmMain.clsRLink.RunInternalScriptGetValue("ls(pos = asNamespace(" & Chr(34) & strPackage & Chr(34) & "))", bSilent:=True)
            If expTemp IsNot Nothing Then
                For i = 0 To expTemp.AsList.Length - 1
                    lstFunction.Add(expTemp.AsList.AsCharacter(i))
                Next
            End If
            FillListViewWithFunctions(lstFunction)
        End If
    End Sub

    Private Sub LoadDatasets(strPackage As String)
        Dim expTemp As SymbolicExpression
        Dim dfPackage As DataFrame = Nothing

        If strPackage IsNot Nothing Then
            expTemp = frmMain.clsRLink.RunInternalScriptGetValue("data.frame(data(package =" & Chr(34) & strPackage & Chr(34) & ")$results)[ ,3:4]", bSilent:=True)
            If expTemp IsNot Nothing Then
                dfPackage = expTemp.AsDataFrame
            End If
        End If
        FillListViewWithDatasets(dfDataframe:=dfPackage)
    End Sub

    Private Sub ucrPnlGetData_ControlValueChanged(ucrChangedControl As ucrCore) Handles ucrPnlGetData.ControlValueChanged, ucrDataFrameGet.ControlValueChanged
        SetData()
    End Sub

    Private Sub SetGetReceiverItemType()
        ucrReceiverGet.Clear()
        If rdoGetColumn.Checked Then
            lblGet.Text = "Selected Column:"
            ucrReceiverGet.SetItemType("column")
            ucrReceiverGet.strSelectorHeading = "Variables"
        ElseIf rdoGetObject.Checked Then
            lblGet.Text = "Selected Object:"
            ucrReceiverGet.SetItemType("object")
            ucrReceiverGet.strSelectorHeading = "Objects"
        End If
    End Sub

    Function RemoveDoubleHashD(strText As String) As String
        ' Replace all occurrences of "##D" with an empty string
        Dim result As String = strText.Replace("##D", String.Empty)

        Return result
    End Function

    Private Sub lstCollection_SelectedIndexChanged(sender As Object, e As EventArgs) Handles lstCollection.SelectedIndexChanged
        If lstCollection.SelectedItems.Count > 0 Then
            Dim strTopic = lstCollection.SelectedItems(0).SubItems(0).Text
            GetExample(strTopic)
        End If
    End Sub

    Private Sub GetExample(strTopic As String)
        Try
            If Not String.IsNullOrEmpty(strTopic) Then
                clsLibraryExpFunction.AddParameter("topic", Chr(34) & strTopic & Chr(34), iPosition:=0)
                If clsLibraryExpFunction IsNot Nothing Then
                    Dim strExampe = frmMain.clsRLink.RunInternalScriptGetValue(clsLibraryExpFunction.ToScript(), bSilent:=True).AsCharacter(0)
                    Dim strResult = RemoveDoubleHashD(strExampe)
                    ucrInputPreviewLibrary.SetText(strResult)
                End If
            End If
        Catch ex As Exception
            MsgBox(strTopic & " has a help file but no examples.")
        End Try
    End Sub

    Private Function GetPreviewText(clsTempFunction As RFunction) As String
        Dim strScript As String = clsTempFunction.Clone.ToScript
        Return strScript
    End Function

    Private Sub ucrChkEditLibrary_ControlValueChanged(ucrChangedControl As ucrCore) Handles ucrChkEditLibrary.ControlValueChanged
        ucrInputPreviewLibrary.IsReadOnly = Not ucrChkEditLibrary.Checked
    End Sub

    Private Sub TabControl1_SelectedIndexChanged(sender As Object, e As EventArgs) Handles TabControl1.SelectedIndexChanged
        Select Case TabControl1.SelectedTab.Name
            Case "TabPage1"
                SetPackage(ucrComboGetPackage.GetText)
            Case "TabPage2"
                SetData()
            Case "TabPage3"
                SetSaveData()
            Case "TabPage4"
                RemoveObject()
            Case "TabPage5"
                Dim strData = ucrInputDataFrame.GetText()
                SetDataFrameScript(strData)
        End Select
    End Sub

    Private Sub RemoveObject()
        Dim lstObject As List(Of String) = ucrInputRemoveObject.GetText.Split(","c).Select(Function(s) s.Trim()).ToList()
        Dim strPreview = "rm(list=" & frmMain.clsRLink.GetListAsRString(lstObject) & ")"
        ucrInputPreviewLibrary.SetText(strPreview)
    End Sub

    Private Sub ucrInputRemoveObject_ControlContentsChanged(ucrChangedControl As ucrCore) Handles ucrInputRemoveObject.ControlContentsChanged
        RemoveObject()
    End Sub

    Private Sub AddAssignToString(strObjectName As String)
        If Not lstAssignToStrings.Contains(strObjectName) Then
            lstAssignToStrings.Add(strObjectName)
        End If
    End Sub

    Private Sub SetPackage(strPackage As String)
        Dim strPreview = GetPreviewText(clsLibraryFunction)

        ucrInputPreviewLibrary.SetText(strPreview)
    End Sub

    Private Sub ucrComboGetPackage_ControlValueChanged(ucrChangedControl As ucrCore) Handles ucrComboGetPackage.ControlValueChanged
        If TabControl1.SelectedTab Is TabPage1 Then
            SetPackage(ucrComboGetPackage.GetText)
        End If
    End Sub

    Private Sub ucrReceiverGet_ControlValueChanged(ucrChangedControl As ucrCore) Handles ucrReceiverGet.ControlValueChanged
        If TabControl1.SelectedTab Is TabPage2 Then
            Dim clsGetColumnFunction As RFunction = ucrReceiverGet.GetVariables
            Dim strAssignTo = ucrReceiverGet.GetVariableNames(False)
            SetPreviewScript(clsGetColumnFunction, strAssignTo)
        End If
    End Sub

    Private Sub SetDataFrameScript(strData As String)
        If String.IsNullOrEmpty(strData) Then
            ucrInputPreviewLibrary.txtInput.Clear()
        End If
        clsRFunctionList.ClearParameters()
        clsRFunctionList.AddParameter(strData, strData)
        clsImportNewDataFrame.AddParameter("data_tables", clsRFunctionList.ToScript)
        SetPreviewScript(clsImportNewDataFrame, strData)
    End Sub

    Private Sub ucrComboGetPackages_ControlValueChanged(ucrChangedControl As ucrCore) Handles ucrComboGetPackages.ControlValueChanged, ucrPnlExample.ControlValueChanged
        If strSelectedPackage <> ucrComboGetPackages.GetText() Then
            strSelectedPackage = ucrComboGetPackages.GetText()
            If strSelectedPackage <> "datasets" Then
                clsLibraryExpFunction.AddParameter("package", Chr(34) & strSelectedPackage & Chr(34), iPosition:=1)
            Else
                clsLibraryExpFunction.RemoveParameterByName("package")
            End If
            TestOkEnabled()
        End If
        ucrInputPreviewLibrary.txtInput.Clear()

        If rdoData.Checked Then
            LoadDatasets(strSelectedPackage)
        Else
            LoadFunctions(strSelectedPackage)
        End If
    End Sub

    Private Sub ucrInputDataFrame_ControlContentsChanged(ucrChangedControl As ucrCore) Handles ucrInputDataFrame.ControlContentsChanged
        If TabControl1.SelectedTab Is TabPage5 Then
            Dim strData = ucrInputDataFrame.GetText()
            SetDataFrameScript(strData)
        End If
    End Sub

    Private Sub ucrInputSaveDataFrame_ControlContentsChanged(ucrChangedControl As ucrCore) Handles ucrInputSaveDataFrame.ControlContentsChanged
        If TabControl1.SelectedTab Is TabPage3 Then
            Dim strData As String = ucrInputSaveDataFrame.GetText()
            SetDataFrameScript(strData)
        End If
    End Sub

    Private Sub ucrBase_ClickOk(sender As Object, e As EventArgs) Handles ucrBase.ClickOk
        frmMain.InsertTextToScriptWindow(iCurrentPos, ucrInputPreviewLibrary.GetText)
    End Sub

    Private Sub ucrInputPreviewLibrary_ControlValueChanged(ucrChangedControl As ucrCore) Handles ucrInputPreviewLibrary.ControlContentsChanged
        If ucrInputPreviewLibrary.GetText <> "" Then
            clsTempPreviewFunction.AddParameter("text", ucrInputPreviewLibrary.GetText, iPosition:=0)
        End If
        TestOkEnabled()
    End Sub

    Private Sub ucrDataFrameGet_ControlContentsChanged(ucrChangedControl As ucrCore) Handles ucrDataFrameGet.ControlContentsChanged
        If TabControl1.SelectedTab Is TabPage2 Then
            Dim strAssignTo = ucrDataFrameGet.strCurrDataFrame
            SetPreviewScript(clsGetDataFrameFunction, strAssignTo)
        End If
    End Sub

    Private Sub SetPreviewScript(clsTempFunction As RFunction, strAssignTo As String)
        clsTempFunction.SetAssignTo(strAssignTo)
        Dim strAssignedScript = ""
        Dim strAssignedTo As String = clsTempFunction.ToScript(strScript:=strAssignedScript)
        ucrInputPreviewLibrary.SetText(strAssignedScript)
    End Sub

    Private Sub ucrSaveColumn_ControlValueChanged(ucrChangedControl As ucrCore) Handles ucrSaveColumn.ControlContentsChanged, ucrSaveModel.ControlContentsChanged, ucrSaveTable.ControlContentsChanged, ucrSaveGraph.ControlContentsChanged, ucrPnlSaveData.ControlContentsChanged
        If TabControl1.SelectedTab IsNot TabPage3 Then
            Exit Sub
        End If
        SetSaveData()
    End Sub

    Private Sub SetSaveData()
        ucrInputSaveDataFrame.SetVisible(False)
        ucrDataFrameSave.SetVisible(False)
        ucrSaveColumn.SetVisible(False)
        ucrSaveGraph.SetVisible(False)
        ucrSaveTable.SetVisible(False)
        ucrSaveModel.SetVisible(False)
        Dim clsTempFunction As New RFunction
        Dim strAssign As String = ""
        Try

            If rdoSaveDataFrame.Checked Then
                ucrInputSaveDataFrame.SetVisible(True)
                Dim strData As String = ucrInputSaveDataFrame.GetText()
                SetDataFrameScript(strData)
            Else
                If rdoSaveColumn.Checked Then
                    ucrDataFrameSave.SetVisible(True)
                    ucrSaveColumn.SetVisible(True)
                    If ucrSaveColumn.IsComplete AndAlso Not String.IsNullOrEmpty(ucrSaveColumn.GetText) _
                        AndAlso Not String.IsNullOrEmpty(ucrDataFrameSave.strCurrDataFrame) Then

                        clsTempFunction = clsSaveColumnFunction
                        strAssign = ucrSaveColumn.GetText
                    End If
                ElseIf rdoSaveObject.Checked Then
                    ucrDataFrameSave.SetVisible(True)
                    ucrSaveGraph.SetVisible(True)
                    ucrSaveTable.SetVisible(True)
                    ucrSaveModel.SetVisible(True)
                    If ucrSaveGraph.IsComplete AndAlso Not String.IsNullOrEmpty(ucrSaveGraph.GetText) Then
                        clsTempFunction = clsSaveGraphFunction
                        strAssign = ucrSaveGraph.GetText
                        ucrSaveModel.ucrInputComboSave.SetText("")
                        ucrSaveTable.ucrInputComboSave.SetText("")
                    ElseIf ucrSaveModel.IsComplete AndAlso Not String.IsNullOrEmpty(ucrSaveModel.GetText) Then
                        clsTempFunction = clsSaveModelFunction
                        strAssign = ucrSaveModel.GetText
                        ucrSaveGraph.ucrInputComboSave.SetText("")
                        ucrSaveTable.ucrInputComboSave.SetText("")
                    ElseIf ucrSaveTable.IsComplete AndAlso Not String.IsNullOrEmpty(ucrSaveTable.GetText) Then
                        clsTempFunction = clsSaveTableFunction
                        strAssign = ucrSaveTable.GetText
                        ucrSaveGraph.ucrInputComboSave.SetText("")
                        ucrSaveModel.ucrInputComboSave.SetText("")
                    End If
                End If
                If clsTempFunction.clsParameters.Count > 0 AndAlso Not String.IsNullOrEmpty(strAssign) Then
                    Dim strAssignedScript As String = ""
                    'clone the function first because the ToScript function modifies the contents of the function.
                    Dim strAssignedTo As String = clsTempFunction.Clone.ToScript(strScript:=strAssignedScript)
                    Dim strScript = strAssign & " <- " & strAssignedTo
                    strScript = strScript.Trim & Environment.NewLine & strAssignedScript.Split(vbCrLf)(1).Trim
                    ucrInputPreviewLibrary.SetText(strScript)
                    AddAssignToString(strAssignedTo)
                Else
                    ucrInputPreviewLibrary.txtInput.Clear()
                End If
            End If
        Catch ex As Exception
            MsgBox(ex.Message)
        End Try
    End Sub

    Private Sub TestOkEnabled()
        ucrBase.OKEnabled(Not ucrInputPreviewLibrary.IsEmpty)
    End Sub

    Private Sub ucrBase_ClickReset(sender As Object, e As EventArgs) Handles ucrBase.ClickReset
        TabControl1.SelectedIndex = 0
        ucrChkEditLibrary.Checked = False
        SetDefaults()
        SetRCodeForControls(True)
        TestOkEnabled()
    End Sub
End Class