' R- Instat
' Copyright (C) 2015-2017
'
' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License 
' along with this program.  If not, see <http://www.gnu.org/licenses/>.

Imports RDotNet
Imports instat.Translations
Public Class dlgScript
    Private strComment As String = "Code generated by the dialog, Script"
    Private bFirstload As Boolean = True
    Private bReset As Boolean = True
    Private clsLibraryFunction, clsGetDataFrameFunction, clsSaveColumnFunction, clsConstantDummyFunction, clsGetColumnFunction,
            clsSaveGraphFunction, clsImportNewDataFrame, clsRFunctionList, clsSaveTableFunction, clsSaveModelFunction As New RFunction
    Private lstAssignToStrings As New List(Of String)
    Public iCurrentPos As Integer

    Private Sub dlgScript_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        If bFirstload Then
            InitialiseDialog()
            bFirstload = False
        End If
        If bReset Then
            SetDefaults()
        End If
        SetRCodeForControls(bReset)
        bReset = False
        autoTranslate(Me)
    End Sub

    Private Sub InitialiseDialog()

        'todo. the iCallType will probably be dynamic
        'ucrBase.clsRsyntax.iCallType = 2
        'ucrBase.clsRsyntax.bSeparateThread = False


        '--------------------------------
        'get data controls
        ucrPnlGetData.AddRadioButton(rdoGetDataFrame)
        ucrPnlGetData.AddRadioButton(rdoGetColumn)
        ucrPnlGetData.AddRadioButton(rdoGetObject)

        'todo. this combobox can be a custom package control in future. Its also needed in dlgHelpVignettes
        ucrComboGetPackage.SetParameter(New RParameter("package", 0))
        ucrComboGetPackage.SetItems(GetPackages(), bAddConditions:=True)
        ucrComboGetPackage.SetDropDownStyleAsNonEditable()
        'ucrComboGetPackage.SetLinkedDisplayControl(New List(Of Control)({lblGetPackage, btnGetPackage}))

        ucrDataFrameGet.SetLabelText("Get Data Frame:")
        ucrDataFrameGet.SetParameter(New RParameter("data_name", 0))
        ucrDataFrameGet.SetParameterIsString()

        ucrSelectorGet.SetParameterIsString()

        'get object controls
        ucrPnlGetObject.AddRadioButton(rdoGetGraph)
        ucrPnlGetObject.AddRadioButton(rdoGetTable)
        ucrPnlGetObject.AddRadioButton(rdoGetModel)

        ucrReceiverGet.SetParameter(New RParameter("string", 0))
        ucrReceiverGet.SetParameterIsRFunction()
        ucrReceiverGet.Selector = ucrSelectorGet
        ucrReceiverGet.bUseFilteredData = False
        ucrReceiverGet.SetItemType("column")
        ucrReceiverGet.SetMeAsReceiver()
        ucrReceiverGet.SetLinkedDisplayControl(New List(Of Control)({lblGet, btnGet}))


        '---------------------------------------------------
        'save controls
        ucrPnlSaveData.AddRadioButton(rdoSaveDataFrame)
        ucrPnlSaveData.AddRadioButton(rdoSaveColumn)
        ucrPnlSaveData.AddRadioButton(rdoSaveObject)

        ucrInputSaveDataFrame.SetValidationTypeAsRVariable()
        ucrInputSaveDataFrame.SetLinkedDisplayControl(New List(Of Control)({lblSaveDataFrame}))

        ucrChkEditLibrary.SetText("Edit Line")

        ucrSaveColumn.SetSaveTypeAsColumn()
        ucrSaveColumn.SetDataFrameSelector(ucrDataFrameSave)
        ucrSaveColumn.SetIsComboBox()
        ucrSaveColumn.SetLabelText("Column Name:")

        ucrSaveGraph.SetSaveTypeAsGraph()
        ucrSaveGraph.SetDataFrameSelector(ucrDataFrameSave)
        ucrSaveGraph.SetIsComboBox()
        ucrSaveGraph.SetLabelText("Graph Name:")

        ucrSaveTable.SetSaveTypeAsTable()
        ucrSaveTable.SetDataFrameSelector(ucrDataFrameSave)
        ucrSaveTable.SetIsComboBox()
        ucrSaveTable.SetLabelText("Table Name:")

        ucrSaveModel.SetSaveTypeAsModel()
        ucrSaveModel.SetDataFrameSelector(ucrDataFrameSave)
        ucrSaveModel.SetIsComboBox()
        ucrSaveModel.SetLabelText("Model Name:")

        'hide base button comment controls
        'ucrBase.chkComment.Checked = False
        'ucrBase.chkComment.Visible = False
        'ucrBase.txtComment.Visible = False

    End Sub

    'todo. this function should eventually be removed once we have a control that displays packages
    Private Function GetPackages() As String()
        Dim arrAvailablePackages() As String = {}
        Dim clsGetPackages As New RFunction
        clsGetPackages.SetRCommand("get_installed_packages_with_data")
        clsGetPackages.AddParameter("with_data", "FALSE")
        Dim expPackageNames As SymbolicExpression = frmMain.clsRLink.RunInternalScriptGetValue(clsGetPackages.ToScript(), bSeparateThread:=False, bSilent:=True)
        If expPackageNames IsNot Nothing AndAlso expPackageNames.Type <> Internals.SymbolicExpressionType.Null Then
            arrAvailablePackages = expPackageNames.AsCharacter.ToArray
            Array.Sort(arrAvailablePackages)
        End If
        Return arrAvailablePackages
    End Function

    Private Sub SetDefaults()
        clsLibraryFunction = New RFunction
        clsGetDataFrameFunction = New RFunction
        clsSaveColumnFunction = New RFunction
        clsSaveGraphFunction = New RFunction
        clsSaveTableFunction = New RFunction
        clsSaveModelFunction = New RFunction
        clsConstantDummyFunction = New RFunction
        clsImportNewDataFrame = New RFunction
        clsRFunctionList = New RFunction
        clsGetColumnFunction = New RFunction

        lstAssignToStrings.Clear()

        'get controls reset
        rdoGetDataFrame.Checked = True
        ucrComboGetPackage.Reset()
        ucrDataFrameGet.Reset()
        ucrSelectorGet.Reset()
        'ucrReceiverGetCol.SetMeAsReceiver()
        rdoGetGraph.Checked = True
        'ucrReceiverGetObject.SetItemType("graph")

        'TabControl1.TabPages(4).Visible = False

        'save controls reset
        rdoSaveDataFrame.Checked = True
        ucrInputDataFrame.SetName("")
        ucrDataFrameSave.Reset()
        ucrSaveColumn.Reset()
        ucrSaveGraph.Reset()
        ucrSaveTable.Reset()
        ucrSaveModel.Reset()

        'script text control reset 
        txtScript.Text = "# Code generated by the dialog, Script"

        clsRFunctionList.SetRCommand("list")
        clsImportNewDataFrame.SetRCommand("data_book$import_data")

        'global function resets
        clsLibraryFunction.SetRCommand("library")
        clsLibraryFunction.AddParameter("package", Chr(34) & "datasets" & Chr(34))
        'clsTempFunction = clsLibraryFunction

        clsConstantDummyFunction.AddParameter("preview", "FALSE", iPosition:=0)
        clsConstantDummyFunction.AddParameter("edit", "FALSE", iPosition:=1)

        clsGetDataFrameFunction.SetRCommand("data_book$get_data_frame")
        clsGetDataFrameFunction.AddParameter("data_name", Chr(34) & ucrDataFrameGet.strCurrDataFrame & Chr(34))
    End Sub

    Private Sub SetRCodeForControls(bReset As Boolean)
        ucrComboGetPackage.SetRCode(clsLibraryFunction, bReset)
        ucrDataFrameGet.SetRCode(clsGetDataFrameFunction, bReset)

        'saving results
        ucrSaveColumn.SetRCode(clsSaveColumnFunction, bReset)
        ucrSaveGraph.SetRCode(clsSaveGraphFunction, bReset)
        ucrSaveTable.SetRCode(clsSaveTableFunction, bReset)
        ucrSaveModel.SetRCode(clsSaveModelFunction, bReset)
    End Sub

    Private Sub ucrPnlGetData_ControlValueChanged(ucrChangedControl As ucrCore) Handles ucrPnlGetData.ControlValueChanged, ucrDataFrameGet.ControlValueChanged
        ucrDataFrameGet.SetVisible(False)
        ucrSelectorGet.SetVisible(False)
        ucrPnlGetObject.SetVisible(False)
        ucrReceiverGet.SetVisible(False)
        SetGetReceiverItemType()
        If rdoGetDataFrame.Checked Then
            ucrDataFrameGet.SetVisible(True)
            'If TabControl1.SelectedTab Is TabPage2 Then
            '    Dim strAssignTo = ucrDataFrameGet.strCurrDataFrame
            '    clsGetDataFrameFunction.SetAssignTo(strAssignTo)
            '    Dim strAssignedScript = ""
            '    Dim strAssignedTo As String = clsGetDataFrameFunction.ToScript(strScript:=strAssignedScript)
            '    ucrInputPreviewLibrary.SetText(strAssignedScript)
            'End If
        ElseIf rdoGetColumn.Checked OrElse rdoGetObject.Checked Then
            ucrPnlGetObject.SetVisible(False)
            ucrSelectorGet.SetVisible(True)
            ucrReceiverGet.SetVisible(True)
        End If
    End Sub

    Private Sub ucrPnlGetObject_ControlValueChanged(ucrChangedControl As ucrCore) Handles ucrPnlGetObject.ControlValueChanged
        SetGetReceiverItemType()
    End Sub

    Private Sub SetGetReceiverItemType()
        ucrReceiverGet.Clear()
        If rdoGetColumn.Checked Then
            lblGet.Text = "Selected Column:"
            ucrReceiverGet.SetItemType("column")
        ElseIf rdoGetGraph.Checked Then
            lblGet.Text = "Selected Graph:"
            ucrReceiverGet.SetItemType("graph")
        ElseIf rdoGetTable.Checked Then
            lblGet.Text = "Selected Table:"
            ucrReceiverGet.SetItemType("table")
        ElseIf rdoGetModel.Checked Then
            lblGet.Text = "Selected Model:"
            ucrReceiverGet.SetItemType("model")
        End If
    End Sub

    Private Sub ucrPnlSaveData_ControlValueChanged(ucrChangedControl As ucrCore) Handles ucrPnlSaveData.ControlValueChanged
        ucrInputSaveDataFrame.SetVisible(False)
        ucrDataFrameSave.SetVisible(False)
        ucrSaveColumn.SetVisible(False)
        ucrSaveGraph.SetVisible(False)
        ucrSaveTable.SetVisible(False)
        ucrSaveModel.SetVisible(False)
        If rdoSaveDataFrame.Checked Then
            ucrInputSaveDataFrame.SetVisible(True)
            'If TabControl1.SelectedTab Is TabPage3 Then
            '    SetPreview(clsImportNewDataFrame)
            'End If
        ElseIf rdoSaveColumn.Checked Then
            ucrDataFrameSave.SetVisible(True)
            ucrSaveColumn.SetVisible(True)
            'clsTempFunction = clsSaveColumnFunction
            'If TabControl1.SelectedTab Is TabPage3 Then
            '    SetPreview(clsSaveColumnFunction)
            'End If
        ElseIf rdoSaveObject.Checked Then
            ucrDataFrameSave.SetVisible(True)
            ucrSaveGraph.SetVisible(True)
            ucrSaveTable.SetVisible(True)
            ucrSaveModel.SetVisible(True)
        End If
    End Sub

    Private Sub SetPreview(clsTempFunction As RFunction)
        ucrInputPreviewLibrary.SetText(GetPreviewText(clsTempFunction))
    End Sub

    Private Function GetPreviewText(clsTempFunction As RFunction) As String
        Dim strScript As String = clsTempFunction.Clone.ToScript
        Return strScript
    End Function

    Private Sub ucrChkEditLibrary_ControlValueChanged(ucrChangedControl As ucrCore) Handles ucrChkEditLibrary.ControlValueChanged
        ucrInputPreviewLibrary.IsReadOnly = Not ucrChkEditLibrary.Checked
    End Sub

    Private Sub TabControl1_SelectedIndexChanged(sender As Object, e As EventArgs) Handles TabControl1.SelectedIndexChanged
        'ucrChkEditLibrary.Checked = False
        'ucrInputPreviewLibrary.txtInput.Clear()
    End Sub

    Private Sub ucrInputRemoveObject_ControlContentsChanged(ucrChangedControl As ucrCore) Handles ucrInputRemoveObject.ControlContentsChanged
        ucrInputPreviewLibrary.SetText(ucrInputRemoveObject.GetText)
    End Sub

    Private Sub btnRemoveObjects_Click(sender As Object, e As EventArgs)
        'create function to remove the objects added in the script
        Dim clsRemoveFunc As New RFunction
        Dim clsRemoveListFun As New RFunction
        clsRemoveFunc.SetRCommand("rm")
        clsRemoveListFun.SetRCommand("c")
        For i As Integer = 0 To lstAssignToStrings.Count - 1
            clsRemoveListFun.AddParameter(i, Chr(34) & lstAssignToStrings(i) & Chr(34), bIncludeArgumentName:=False)
        Next
        clsRemoveFunc.AddParameter("list", clsRFunctionParameter:=clsRemoveListFun)

        AppendTextScript(clsRemoveFunc.ToScript())
    End Sub

    Private Sub AppendTextScript(strNewScript As String)
        txtScript.Text = txtScript.Text & Environment.NewLine & Environment.NewLine & strNewScript.Trim
        txtScript.SelectionStart = txtScript.Text.Length
        txtScript.ScrollToCaret()
        txtScript.Refresh()
    End Sub

    Private Sub AddAssignToString(strObjectName As String)
        If Not lstAssignToStrings.Contains(strObjectName) Then
            lstAssignToStrings.Add(strObjectName)
        End If
    End Sub

    Private Sub ucrComboGetPackage_ControlValueChanged(ucrChangedControl As ucrCore) Handles ucrComboGetPackage.ControlValueChanged
        If TabControl1.SelectedTab Is TabPage1 Then
            If ucrComboGetPackage.GetText <> "datasets" Then
                ucrInputPreviewLibrary.SetText(GetPreviewText(clsLibraryFunction))
            End If
        End If
    End Sub

    Private Sub ucrReceiverGet_ControlValueChanged(ucrChangedControl As ucrCore) Handles ucrReceiverGet.ControlValueChanged
        If TabControl1.SelectedTab Is TabPage2 Then
            Dim strAssignedScript As String = ""
            Dim clsGetColumnFunction As RFunction = ucrReceiverGet.GetVariables
            clsGetColumnFunction.SetAssignTo(ucrReceiverGet.GetVariableNames(False))
            Dim strAssignedTo As String = clsGetColumnFunction.ToScript(strScript:=strAssignedScript)
            ucrInputPreviewLibrary.SetText(strAssignedScript)
        End If
    End Sub

    Private Sub ucrSaveTable_ControlValueChanged(ucrChangedControl As ucrCore) Handles ucrSaveTable.ControlValueChanged, ucrSaveGraph.ControlValueChanged, ucrSaveModel.ControlValueChanged, ucrPnlSaveData.ControlValueChanged
        If TabControl1.SelectedTab Is TabPage3 AndAlso rdoSaveObject.Checked Then
            If ucrChangedControl Is ucrSaveGraph Then
                SetPreview(clsSaveGraphFunction)
            ElseIf ucrChangedControl Is ucrSaveModel Then
                SetPreview(clsSaveModelFunction)
            ElseIf ucrChangedControl Is ucrSaveTable Then
                SetPreview(clsSaveTableFunction)
            End If
        End If
    End Sub

    Private Sub ucrInputDataFrame_ControlContentsChanged(ucrChangedControl As ucrCore) Handles ucrInputDataFrame.ControlContentsChanged
        If TabControl1.SelectedTab Is TabPage5 Then
            Dim strData = ucrInputDataFrame.GetText()
            clsRFunctionList.ClearParameters()
            clsRFunctionList.AddParameter(strData, strData)
            clsImportNewDataFrame.AddParameter("data_tables", clsRFunctionList.ToScript)
            clsImportNewDataFrame.SetAssignTo(strData)
            Dim strAssignedScript = ""
            Dim strAssignedTo As String = clsImportNewDataFrame.ToScript(strScript:=strAssignedScript)
            ucrInputPreviewLibrary.SetText(strAssignedScript)
        End If
    End Sub

    Private Sub ucrInputSaveDataFrame_ControlContentsChanged(ucrChangedControl As ucrCore) Handles ucrInputSaveDataFrame.ControlContentsChanged
        If TabControl1.SelectedTab Is TabPage3 Then
            Dim strData As String = ucrInputSaveDataFrame.GetText()
            clsRFunctionList.ClearParameters()
            clsRFunctionList.AddParameter(strData, strData)
            clsImportNewDataFrame.AddParameter("data_tables", clsRFunctionList.ToScript)
            clsImportNewDataFrame.SetAssignTo(strData)
            Dim strAssignedScript = ""
            Dim strAssignedTo As String = clsImportNewDataFrame.ToScript(strScript:=strAssignedScript)
            ucrInputPreviewLibrary.SetText(strAssignedScript)
        End If
    End Sub

    Private Sub ucrBase_ClickOk(sender As Object, e As EventArgs) Handles ucrBase.ClickOk
        If TabControl1.SelectedTab Is TabPage4 AndAlso Not String.IsNullOrEmpty(ucrInputRemoveObject.GetText) Then
            frmMain.RemoveLineToScriptWindow(ucrInputRemoveObject.GetText.Split(","))
        Else
            frmMain.InsertTextToScriptWindow(iCurrentPos, ucrInputPreviewLibrary.GetText)
        End If
    End Sub

    Private Sub ucrDataFrameGet_ControlContentsChanged(ucrChangedControl As ucrCore) Handles ucrDataFrameGet.ControlContentsChanged
        If TabControl1.SelectedTab Is TabPage2 Then
            Dim strAssignTo = ucrDataFrameGet.strCurrDataFrame
            clsGetDataFrameFunction.SetAssignTo(strAssignTo)
            Dim strAssignedScript = ""
            Dim strAssignedTo As String = clsGetDataFrameFunction.ToScript(strScript:=strAssignedScript)
            ucrInputPreviewLibrary.SetText(strAssignedScript)
        End If
    End Sub

    Private Sub ucrSaveColumn_ControlValueChanged(ucrChangedControl As ucrCore) Handles ucrSaveColumn.ControlValueChanged, ucrSaveModel.ControlValueChanged, ucrSaveTable.ControlValueChanged, ucrSaveGraph.ControlValueChanged
        If TabControl1.SelectedTab IsNot TabPage3 Then
            Exit Sub
        End If

        Dim clsTempFunction As New RFunction
        Dim strAssign As String = ""
        If ucrSaveColumn.IsComplete AndAlso ucrChangedControl Is ucrSaveColumn Then
            clsTempFunction = clsSaveColumnFunction
            strAssign = ucrSaveColumn.GetText
        ElseIf ucrSaveGraph.IsComplete AndAlso ucrChangedControl Is ucrSaveGraph Then
            clsTempFunction = clsSaveGraphFunction
            strAssign = ucrSaveGraph.GetText
            ucrSaveModel.SetText("")
            ucrSaveTable.SetText("")
        ElseIf ucrSaveModel.IsComplete AndAlso ucrChangedControl Is ucrSaveModel Then
            clsTempFunction = clsSaveModelFunction
            strAssign = ucrSaveModel.GetText
            ucrSaveGraph.SetText("")
            ucrSaveTable.SetText("")
        ElseIf ucrSaveTable.IsComplete AndAlso ucrChangedControl Is ucrSaveTable Then
            clsTempFunction = clsSaveTableFunction
            strAssign = ucrSaveTable.GetText
            ucrSaveGraph.SetText("")
            ucrSaveModel.SetText("")
        End If

        If clsTempFunction IsNot Nothing AndAlso Not String.IsNullOrEmpty(strAssign) Then
            Dim strAssignedScript As String = ""
            'clone the function first because the ToScript function modifies the contents of the function.
            Dim strAssignedTo As String = clsTempFunction.Clone.ToScript(strScript:=strAssignedScript)
            Dim strScript = strAssign & " <- " & strAssignedTo
            strScript = strScript.Trim & Environment.NewLine & strAssignedScript.Split(vbCrLf)(1).Trim
            ucrInputPreviewLibrary.SetText(strScript)
            AddAssignToString(strAssignedTo)
        End If
    End Sub
End Class